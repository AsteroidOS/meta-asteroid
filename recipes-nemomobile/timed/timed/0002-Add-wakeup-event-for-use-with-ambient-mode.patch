From 51ffbf73829dcdb58d63a0ff5c721180e49595b6 Mon Sep 17 00:00:00 2001
From: MagneFire <IDaNLContact@gmail.com>
Date: Thu, 16 Jul 2020 22:51:52 +0200
Subject: [PATCH] Add wakeup event for use with ambient mode. It seems like

Upstream-Status: Inappropriate

 there is no easy way to get a callback from when an event occurs. The only
 way is using voland. Which, on AsteroidOS, is used by the alarmclock app. So
 scheduling an event for use with ambient mode would actually show the
 alarmclock dialog (and update the screen). This is due to alarmclock using a
 D-Bus (systemd) service that triggers on any voland signal. I don't think
 there is a way to filter these events with systemd. Another thing that may be
 used is the `next_bootup_event` event. But this is not a reliable source,
 because alarmclock events also cause this signal, can cause multiple triggers
 at irregular intervals.

Somehow we need to update the screen without triggering the alarmclock alarm dialog.
The most straightforward way to do this is by adding a special `wakeup` type event, that doesn't trigger the voland event, but instead a new event.

---
 src/server/adaptor.h   |  1 +
 src/server/machine.cpp |  1 +
 src/server/machine.h   |  1 +
 src/server/state.cpp   | 17 +++++++++++++++--
 src/server/state.h     |  1 +
 src/server/timed.cpp   |  1 +
 src/server/timed.h     |  1 +
 7 files changed, 21 insertions(+), 2 deletions(-)

diff --git a/src/server/adaptor.h b/src/server/adaptor.h
index 253e4a6..83afb40 100644
--- a/src/server/adaptor.h
+++ b/src/server/adaptor.h
@@ -83,6 +83,7 @@ signals:
   void next_bootup_event(int next_boot_event, int next_non_boot_event);
   void alarm_present_changed(bool present);
   void alarm_triggers_changed(Maemo::Timed::Event::Triggers);
+  void wakeup_event();
 
 public slots:
 
diff --git a/src/server/machine.cpp b/src/server/machine.cpp
index 475f31d..16d904e 100644
--- a/src/server/machine.cpp
+++ b/src/server/machine.cpp
@@ -118,6 +118,7 @@ machine_t::machine_t(const Timed *daemon) : timed(daemon)
   state_armed->open() ;
 
   QObject::connect(state_dlg_wait, SIGNAL(voland_needed()), this, SIGNAL(voland_needed())) ;
+  QObject::connect(state_dlg_wait, SIGNAL(wakeup_event()), this, SIGNAL(wakeup_event())) ;
 
   QObject::connect(state_dlg_wait, SIGNAL(closed()), state_dlg_requ, SLOT(open())) ;
   QObject::connect(state_dlg_wait, SIGNAL(closed()), state_dlg_user, SLOT(open())) ;
diff --git a/src/server/machine.h b/src/server/machine.h
index 3f57355..27d7107 100644
--- a/src/server/machine.h
+++ b/src/server/machine.h
@@ -109,6 +109,7 @@ Q_SIGNALS:
   void queue_to_be_saved() ;
   void voland_needed() ;
   void next_bootup_event(int, int);
+  void wakeup_event();
   void child_created(unsigned, int) ;
   void alarm_present(bool present);
   void alarm_trigger(QMap<QString, QVariant> triggers);
diff --git a/src/server/state.cpp b/src/server/state.cpp
index d4bde10..b9f1bcc 100644
--- a/src/server/state.cpp
+++ b/src/server/state.cpp
@@ -740,8 +740,21 @@ void state_aborted_t::enter(event_t *e)
 void state_dlg_wait_t::enter(event_t *e)
 {
   e->flags |= EventFlags::In_Dialog ;
-  if (not is_open)
-    emit voland_needed() ;
+  for(attribute_t::const_iterator at=e->attr.txt.begin(); at!=e->attr.txt.end(); at++)
+  {
+    QString key = string_std_to_q(at->first) ;
+    QString val = string_std_to_q(at->second) ;
+    if (key == "type") {
+      if (val == "wakeup") {
+        machine->state_served->go_to(e);
+        emit wakeup_event();
+      } else {
+        if (not is_open)
+          emit voland_needed();
+      }
+      break;
+    }
+  }
   abstract_gate_state_t::enter(e) ;
 }
 
diff --git a/src/server/state.h b/src/server/state.h
index 92046e5..0e84ccb 100644
--- a/src/server/state.h
+++ b/src/server/state.h
@@ -314,6 +314,7 @@ public:
   uint32_t cluster_bits() { return EventFlags::Cluster_Dialog ; }
 Q_SIGNALS:
   void voland_needed() ;
+  void wakeup_event();
 private:
   Q_OBJECT ;
 } ;
diff --git a/src/server/timed.cpp b/src/server/timed.cpp
index 80b950a..498a609 100644
--- a/src/server/timed.cpp
+++ b/src/server/timed.cpp
@@ -494,6 +494,7 @@ void Timed::init_create_event_machine()
 
   // Forward signal from am to DBUS via com_nokia_time DBUS adaptor
   QObject::connect(am, SIGNAL(next_bootup_event(int,int)), this, SIGNAL(next_bootup_event(int,int)));
+  QObject::connect(am, SIGNAL(wakeup_event()), this, SIGNAL(wakeup_event()));
   voland_watcher = NULL ;
   QObject::connect(this, SIGNAL(voland_registered()), am, SIGNAL(voland_registered())) ;
   QObject::connect(this, SIGNAL(voland_unregistered()), am, SIGNAL(voland_unregistered())) ;
diff --git a/src/server/timed.h b/src/server/timed.h
index 7a65592..0215210 100644
--- a/src/server/timed.h
+++ b/src/server/timed.h
@@ -145,6 +145,7 @@ Q_SIGNALS:
   void next_bootup_event(int next_boot_event, int next_non_boot_event);
   void alarm_present_changed(bool present);
   void alarm_triggers_changed(Maemo::Timed::Event::Triggers);
+  void wakeup_event();
   // void settings_changed_1(bool system_time) ;
 public:
   Timed(int ac, char **av) ;
