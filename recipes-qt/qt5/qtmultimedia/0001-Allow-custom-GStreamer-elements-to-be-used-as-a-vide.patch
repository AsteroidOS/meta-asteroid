From ba86d82b9c81812254958211b5b8c12a87f4cb75 Mon Sep 17 00:00:00 2001
From: Florent Revest <revestflo@gmail.com>
Date: Wed, 31 Jul 2019 13:48:48 +0200
Subject: [PATCH] Allow custom GStreamer elements to be used as a video sinks

Upstream-Status: Inappropriate

---
 src/gsttools/gsttools.pro                     |  2 ++
 src/gsttools/qgstreamervideosinkcontrol.cpp   | 32 +++++++++++++++++++
 src/gsttools/qgstreamervideosinkcontrol_p.h   | 30 +++++++++++++++++
 src/multimedia/controls/controls.pri          |  4 ++-
 .../controls/qgstreamerelementcontrol.cpp     | 11 +++++++
 .../controls/qgstreamerelementcontrol_p.h     | 23 +++++++++++++
 .../gstreamer/camerabin/camerabinservice.cpp  |  3 ++
 .../mediaplayer/qgstreamerplayerservice.cpp   |  3 ++
 8 files changed, 107 insertions(+), 1 deletion(-)
 create mode 100644 src/gsttools/qgstreamervideosinkcontrol.cpp
 create mode 100644 src/gsttools/qgstreamervideosinkcontrol_p.h
 create mode 100644 src/multimedia/controls/qgstreamerelementcontrol.cpp
 create mode 100644 src/multimedia/controls/qgstreamerelementcontrol_p.h

diff --git a/src/gsttools/gsttools.pro b/src/gsttools/gsttools.pro
index 0127cbe9..60203d88 100644
--- a/src/gsttools/gsttools.pro
+++ b/src/gsttools/gsttools.pro
@@ -28,6 +28,7 @@ PRIVATE_HEADERS += \
     qgstcodecsinfo_p.h \
     qgstreamervideoprobecontrol_p.h \
     qgstreameraudioprobecontrol_p.h \
+    qgstreamervideosinkcontrol_p.h \
     qgstreamervideowindow_p.h \
     qgstreamervideooverlay_p.h \
     qgsttools_global_p.h \
@@ -47,6 +48,7 @@ SOURCES += \
     qgstcodecsinfo.cpp \
     qgstreamervideoprobecontrol.cpp \
     qgstreameraudioprobecontrol.cpp \
+    qgstreamervideosinkcontrol.cpp \
     qgstreamervideowindow.cpp \
     qgstreamervideooverlay.cpp \
     qgstreamerplayersession.cpp \
diff --git a/src/gsttools/qgstreamervideosinkcontrol.cpp b/src/gsttools/qgstreamervideosinkcontrol.cpp
new file mode 100644
index 00000000..50951575
--- /dev/null
+++ b/src/gsttools/qgstreamervideosinkcontrol.cpp
@@ -0,0 +1,32 @@
+#include "qgstreamervideosinkcontrol_p.h"
+
+#include <gst/gst.h>
+
+QGStreamerVideoSinkControl::QGStreamerVideoSinkControl(QObject *parent)
+    : QGStreamerElementControl(parent)
+    , m_videoSink(0)
+{
+}
+
+QGStreamerVideoSinkControl::~QGStreamerVideoSinkControl()
+{
+    if (m_videoSink)
+        gst_object_unref(GST_OBJECT(m_videoSink));
+}
+
+GstElement *QGStreamerVideoSinkControl::videoSink()
+{
+    return m_videoSink;
+}
+
+void QGStreamerVideoSinkControl::setElement(GstElement *element)
+{
+    if (m_videoSink != element) {
+        if (m_videoSink)
+            gst_object_unref(GST_OBJECT(m_videoSink));
+        m_videoSink = element;
+        if (m_videoSink)
+            gst_object_ref(GST_OBJECT(element));
+        emit sinkChanged();
+    }
+}
diff --git a/src/gsttools/qgstreamervideosinkcontrol_p.h b/src/gsttools/qgstreamervideosinkcontrol_p.h
new file mode 100644
index 00000000..a17a9fc1
--- /dev/null
+++ b/src/gsttools/qgstreamervideosinkcontrol_p.h
@@ -0,0 +1,30 @@
+#ifndef QGSTREAMERVIDEOSINKCONTROL_P_H
+#define QGSTREAMERVIDEOSINKCONTROL_P_H
+
+#include <private/qgsttools_global_p.h>
+#include <private/qgstreamerelementcontrol_p.h>
+#include <private/qgstreamervideorendererinterface_p.h>
+
+class Q_GSTTOOLS_EXPORT QGStreamerVideoSinkControl
+        : public QGStreamerElementControl
+        , public QGstreamerVideoRendererInterface
+{
+    Q_OBJECT
+    Q_INTERFACES(QGstreamerVideoRendererInterface)
+public:
+    QGStreamerVideoSinkControl(QObject *parent = 0);
+    ~QGStreamerVideoSinkControl();
+
+    GstElement *videoSink();
+    void setElement(GstElement *element);
+
+Q_SIGNALS:
+    void sinkChanged();
+    void readyChanged(bool);
+
+private:
+    GstElement *m_videoSink;
+};
+
+#endif
+
diff --git a/src/multimedia/controls/controls.pri b/src/multimedia/controls/controls.pri
index cfebe977..8b815c33 100644
--- a/src/multimedia/controls/controls.pri
+++ b/src/multimedia/controls/controls.pri
@@ -42,7 +42,8 @@ PUBLIC_HEADERS += \

 PRIVATE_HEADERS += \
     controls/qmediaplaylistcontrol_p.h \
-    controls/qmediaplaylistsourcecontrol_p.h
+    controls/qmediaplaylistsourcecontrol_p.h \
+    controls/qgstreamerelementcontrol_p.h

 SOURCES += \
     controls/qcameracapturebufferformatcontrol.cpp \
@@ -82,5 +83,6 @@ SOURCES += \
     controls/qaudioinputselectorcontrol.cpp \
     controls/qaudiooutputselectorcontrol.cpp \
     controls/qvideodeviceselectorcontrol.cpp \
+    controls/qgstreamerelementcontrol.cpp \
     controls/qaudiorolecontrol.cpp \
     controls/qcustomaudiorolecontrol.cpp
diff --git a/src/multimedia/controls/qgstreamerelementcontrol.cpp b/src/multimedia/controls/qgstreamerelementcontrol.cpp
new file mode 100644
index 00000000..30a4303a
--- /dev/null
+++ b/src/multimedia/controls/qgstreamerelementcontrol.cpp
@@ -0,0 +1,11 @@
+#include "qgstreamerelementcontrol_p.h"
+
+QGStreamerElementControl::QGStreamerElementControl(QObject *parent)
+    : QMediaControl(parent)
+{
+}
+
+QGStreamerElementControl::~QGStreamerElementControl()
+{
+}
+
diff --git a/src/multimedia/controls/qgstreamerelementcontrol_p.h b/src/multimedia/controls/qgstreamerelementcontrol_p.h
new file mode 100644
index 00000000..f066827e
--- /dev/null
+++ b/src/multimedia/controls/qgstreamerelementcontrol_p.h
@@ -0,0 +1,23 @@
+#ifndef QGSTREAMERELEMENTCONTROL_P_H
+#define QGSTREAMERELEMENTCONTROL_P_H
+
+#include <QtMultimedia/qmediacontrol.h>
+
+typedef struct _GstElement GstElement;
+
+class Q_MULTIMEDIA_EXPORT QGStreamerElementControl : public QMediaControl
+{
+    Q_OBJECT
+public:
+    virtual ~QGStreamerElementControl();
+
+    virtual void setElement(GstElement *element) = 0;
+
+protected:
+    QGStreamerElementControl(QObject *parent = 0);
+};
+
+#define QGStreamerVideoSinkControl_iid "org.qt-project.qt.gstreamervideosinkcontrol/5.0"
+
+#endif
+
diff --git a/src/plugins/gstreamer/camerabin/camerabinservice.cpp b/src/plugins/gstreamer/camerabin/camerabinservice.cpp
index a68ecfdb..81ef4984 100644
--- a/src/plugins/gstreamer/camerabin/camerabinservice.cpp
+++ b/src/plugins/gstreamer/camerabin/camerabinservice.cpp
@@ -74,6 +74,7 @@
 #endif
 #include <private/qgstreamervideowindow_p.h>
 #include <private/qgstreamervideorenderer_p.h>
+#include <private/qgstreamervideosinkcontrol_p.h>
 #include <private/qmediaserviceprovider_p.h>

 #include <QtCore/qdebug.h>
@@ -153,6 +154,8 @@ QMediaControl *CameraBinService::requestControl(const char *name)
     if (!m_videoOutput) {
         if (qstrcmp(name, QVideoRendererControl_iid) == 0) {
             m_videoOutput = m_videoRenderer;
+        } else if (qstrcmp(name, QGStreamerVideoSinkControl_iid) == 0) {
+            m_videoOutput = new QGStreamerVideoSinkControl(this);
         } else if (qstrcmp(name, QVideoWindowControl_iid) == 0) {
             m_videoOutput = m_videoWindow;
         }
diff --git a/src/plugins/gstreamer/mediaplayer/qgstreamerplayerservice.cpp b/src/plugins/gstreamer/mediaplayer/qgstreamerplayerservice.cpp
index 4bf4a0a5..1a4d294a 100644
--- a/src/plugins/gstreamer/mediaplayer/qgstreamerplayerservice.cpp
+++ b/src/plugins/gstreamer/mediaplayer/qgstreamerplayerservice.cpp
@@ -54,6 +54,7 @@
 #endif
 #include <private/qgstreamervideowindow_p.h>
 #include <private/qgstreamervideorenderer_p.h>
+#include <private/qgstreamervideosinkcontrol_p.h>

 #include "qgstreamerstreamscontrol.h"
 #include <private/qgstreameraudioprobecontrol_p.h>
@@ -137,6 +138,8 @@ QMediaControl *QGstreamerPlayerService::requestControl(const char *name)
     if (!m_videoOutput) {
         if (qstrcmp(name, QVideoRendererControl_iid) == 0)
             m_videoOutput = m_videoRenderer;
+        else if (qstrcmp(name, QGStreamerVideoSinkControl_iid) == 0)
+            m_videoOutput = new QGStreamerVideoSinkControl(this);
         else if (qstrcmp(name, QVideoWindowControl_iid) == 0)
             m_videoOutput = m_videoWindow;
 #if defined(HAVE_WIDGETS)
--
2.30.0
