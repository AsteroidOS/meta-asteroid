From c79cc3285f49494054cd923f8558b14905f5218c Mon Sep 17 00:00:00 2001
From: Florent Revest <revestflo@gmail.com>
Date: Mon, 1 Oct 2018 23:18:42 +0200
Subject: [PATCH] Revert most of "Remove QWaylandExtendedSurface* from the
 private compositor API"

Upstream-Status: Inappropriate

---
 src/compositor/extensions/extensions.pri      |   3 +
 .../extensions/qwlextendedsurface.cpp         | 188 ++++++++++++++++++
 .../extensions/qwlextendedsurface_p.h         | 159 +++++++++++++++
 sync.profile                                  |   2 +
 4 files changed, 352 insertions(+)
 create mode 100644 src/compositor/extensions/qwlextendedsurface.cpp
 create mode 100644 src/compositor/extensions/qwlextendedsurface_p.h

diff --git a/src/compositor/extensions/extensions.pri b/src/compositor/extensions/extensions.pri
index e52bbfd6..ef1b552d 100644
--- a/src/compositor/extensions/extensions.pri
+++ b/src/compositor/extensions/extensions.pri
@@ -5,6 +5,7 @@ CONFIG += generated_privates
 private_headers.CONFIG += no_check_exist

 WAYLANDSERVERSOURCES += \
+    ../extensions/surface-extension.xml \
     ../extensions/touch-extension.xml \
     ../extensions/qt-key-unstable-v1.xml \
     ../extensions/qt-windowmanager.xml \
@@ -20,6 +21,7 @@ WAYLANDSERVERSOURCES += \
     ../extensions/qt-texture-sharing-unstable-v1.xml \

 HEADERS += \
+    extensions/qwlextendedsurface_p.h \
     extensions/qwlqttouch_p.h \
     extensions/qwlqtkey_p.h \
     extensions/qwaylandshell.h \
@@ -55,6 +57,7 @@ HEADERS += \
     extensions/qwaylandivisurface_p.h \

 SOURCES += \
+    extensions/qwlextendedsurface.cpp \
     extensions/qwlqttouch.cpp \
     extensions/qwlqtkey.cpp \
     extensions/qwaylandshell.cpp \
diff --git a/src/compositor/extensions/qwlextendedsurface.cpp b/src/compositor/extensions/qwlextendedsurface.cpp
new file mode 100644
index 00000000..b0850f0e
--- /dev/null
+++ b/src/compositor/extensions/qwlextendedsurface.cpp
@@ -0,0 +1,188 @@
+/****************************************************************************
+**
+** Copyright (C) 2017 The Qt Company Ltd.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtWaylandCompositor module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qwlextendedsurface_p.h"
+
+#include <QtWaylandCompositor/QWaylandCompositor>
+
+QT_BEGIN_NAMESPACE
+
+namespace QtWayland {
+
+SurfaceExtensionGlobal::SurfaceExtensionGlobal(QWaylandCompositor *compositor)
+    : QWaylandCompositorExtensionTemplate(compositor)
+    , QtWaylandServer::qt_surface_extension(compositor->display(), 1)
+{
+}
+
+void SurfaceExtensionGlobal::surface_extension_get_extended_surface(Resource *resource,
+                                                                    uint32_t id,
+                                                                    struct wl_resource *surface_resource)
+{
+    QWaylandSurface *surface = QWaylandSurface::fromResource(surface_resource);
+    ExtendedSurface *extSurface = new ExtendedSurface(resource->client(),id, wl_resource_get_version(resource->handle), surface);
+    emit extendedSurfaceReady(extSurface, surface);
+}
+
+ExtendedSurface::ExtendedSurface(struct wl_client *client, uint32_t id, int version, QWaylandSurface *surface)
+    : QWaylandCompositorExtensionTemplate(surface)
+    , QtWaylandServer::qt_extended_surface(client, id, version)
+    , m_surface(surface)
+    , m_windowFlags(0)
+{
+}
+
+ExtendedSurface::~ExtendedSurface()
+{
+}
+
+void ExtendedSurface::sendGenericProperty(const QString &name, const QVariant &variant)
+{
+    QByteArray byteValue;
+    QDataStream ds(&byteValue, QIODevice::WriteOnly);
+    ds << variant;
+    send_set_generic_property(name, byteValue);
+
+}
+
+void ExtendedSurface::sendOnScreenVisibilityChange(bool onScreen)
+{
+    setVisibility(onScreen ? QWindow::AutomaticVisibility : QWindow::Hidden);
+}
+
+void ExtendedSurface::setVisibility(QWindow::Visibility visibility)
+{
+    send_onscreen_visibility(visibility);
+}
+
+void ExtendedSurface::setParentSurface(QWaylandSurface *surface)
+{
+    m_surface = surface;
+}
+
+void ExtendedSurface::extended_surface_update_generic_property(Resource *resource,
+                                                               const QString &name,
+                                                               struct wl_array *value)
+{
+    Q_UNUSED(resource);
+    QVariant variantValue;
+    QByteArray byteValue((const char*)value->data, value->size);
+    QDataStream ds(&byteValue, QIODevice::ReadOnly);
+    ds >> variantValue;
+    setWindowPropertyImpl(name,variantValue);
+}
+
+Qt::ScreenOrientations ExtendedSurface::contentOrientationMask() const
+{
+    return m_contentOrientationMask;
+}
+
+void ExtendedSurface::extended_surface_set_content_orientation_mask(Resource *resource, int32_t orientation)
+{
+    Q_UNUSED(resource);
+    Qt::ScreenOrientations mask = 0;
+    if (orientation & QT_EXTENDED_SURFACE_ORIENTATION_PORTRAITORIENTATION)
+        mask |= Qt::PortraitOrientation;
+    if (orientation & QT_EXTENDED_SURFACE_ORIENTATION_LANDSCAPEORIENTATION)
+        mask |= Qt::LandscapeOrientation;
+    if (orientation & QT_EXTENDED_SURFACE_ORIENTATION_INVERTEDPORTRAITORIENTATION)
+        mask |= Qt::InvertedPortraitOrientation;
+    if (orientation & QT_EXTENDED_SURFACE_ORIENTATION_INVERTEDLANDSCAPEORIENTATION)
+        mask |= Qt::InvertedLandscapeOrientation;
+    if (orientation & QT_EXTENDED_SURFACE_ORIENTATION_PRIMARYORIENTATION)
+        mask |= Qt::PrimaryOrientation;
+
+    Qt::ScreenOrientations oldMask = m_contentOrientationMask;
+    m_contentOrientationMask = mask;
+
+    if (mask != oldMask)
+        emit contentOrientationMaskChanged();
+}
+
+QVariantMap ExtendedSurface::windowProperties() const
+{
+    return m_windowProperties;
+}
+
+QVariant ExtendedSurface::windowProperty(const QString &propertyName) const
+{
+    QVariantMap props = m_windowProperties;
+    return props.value(propertyName);
+}
+
+void ExtendedSurface::setWindowProperty(const QString &name, const QVariant &value)
+{
+    setWindowPropertyImpl(name,value);
+    sendGenericProperty(name, value);
+}
+
+void ExtendedSurface::setWindowPropertyImpl(const QString &name, const QVariant &value)
+{
+    m_windowProperties.insert(name, value);
+    emit windowPropertyChanged(name,value);
+}
+
+void ExtendedSurface::extended_surface_set_window_flags(Resource *resource, int32_t flags)
+{
+    Q_UNUSED(resource);
+    WindowFlags windowFlags(flags);
+    if (windowFlags == m_windowFlags)
+        return;
+    m_windowFlags = windowFlags;
+    emit windowFlagsChanged();
+}
+
+void ExtendedSurface::extended_surface_destroy_resource(Resource *)
+{
+    delete this;
+}
+
+void ExtendedSurface::extended_surface_raise(Resource *)
+{
+    emit raiseRequested();
+}
+
+void ExtendedSurface::extended_surface_lower(Resource *)
+{
+    emit lowerRequested();
+}
+
+}
+
+QT_END_NAMESPACE
diff --git a/src/compositor/extensions/qwlextendedsurface_p.h b/src/compositor/extensions/qwlextendedsurface_p.h
new file mode 100644
index 00000000..8ad89619
--- /dev/null
+++ b/src/compositor/extensions/qwlextendedsurface_p.h
@@ -0,0 +1,159 @@
+/****************************************************************************
+**
+** Copyright (C) 2017 The Qt Company Ltd.
+** Contact: https://www.qt.io/licensing/
+**
+** This file is part of the QtWaylandCompositor module of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and The Qt Company. For licensing terms
+** and conditions see https://www.qt.io/terms-conditions. For further
+** information use the contact form at https://www.qt.io/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 3 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL3 included in the
+** packaging of this file. Please review the following information to
+** ensure the GNU Lesser General Public License version 3 requirements
+** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 2.0 or (at your option) the GNU General
+** Public license version 3 or any later version approved by the KDE Free
+** Qt Foundation. The licenses are as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
+** included in the packaging of this file. Please review the following
+** information to ensure the GNU General Public License requirements will
+** be met: https://www.gnu.org/licenses/gpl-2.0.html and
+** https://www.gnu.org/licenses/gpl-3.0.html.
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#ifndef WLEXTENDEDSURFACE_H
+#define WLEXTENDEDSURFACE_H
+
+//
+//  W A R N I N G
+//  -------------
+//
+// This file is not part of the Qt API.  It exists purely as an
+// implementation detail.  This header file may change from version to
+// version without notice, or even be removed.
+//
+// We mean it.
+//
+
+#include <wayland-server.h>
+
+#include <QtWaylandCompositor/private/qwayland-server-surface-extension.h>
+#include <QtWaylandCompositor/qwaylandsurface.h>
+#include <QtWaylandCompositor/qwaylandcompositorextension.h>
+
+#include <QtCore/QVariant>
+#include <QtCore/QLinkedList>
+#include <QtGui/QWindow>
+
+QT_BEGIN_NAMESPACE
+
+class QWaylandCompositor;
+class QWaylandSurface;
+
+namespace QtWayland {
+
+class ExtendedSurface;
+
+class Q_WAYLAND_COMPOSITOR_EXPORT SurfaceExtensionGlobal : public QWaylandCompositorExtensionTemplate<SurfaceExtensionGlobal>, public QtWaylandServer::qt_surface_extension
+{
+    Q_OBJECT
+public:
+    SurfaceExtensionGlobal(QWaylandCompositor *compositor);
+
+Q_SIGNALS:
+    void extendedSurfaceReady(ExtendedSurface *extSurface, QWaylandSurface *surface);
+
+private:
+    void surface_extension_get_extended_surface(Resource *resource,
+                                                uint32_t id,
+                                                struct wl_resource *surface);
+
+};
+
+class Q_WAYLAND_COMPOSITOR_EXPORT ExtendedSurface : public QWaylandCompositorExtensionTemplate<ExtendedSurface>, public QtWaylandServer::qt_extended_surface
+{
+    Q_OBJECT
+    Q_PROPERTY(Qt::ScreenOrientations contentOrientationMask READ contentOrientationMask NOTIFY contentOrientationMaskChanged)
+    Q_PROPERTY(WindowFlags windowFlags READ windowFlags NOTIFY windowFlagsChanged)
+    Q_FLAGS(WindowFlag WindowFlags)
+public:
+    enum WindowFlag {
+        OverridesSystemGestures     = 0x0001,
+        StaysOnTop                  = 0x0002,
+        BypassWindowManager         = 0x0004
+    };
+    Q_DECLARE_FLAGS(WindowFlags, WindowFlag)
+
+    ExtendedSurface(struct wl_client *client, uint32_t id, int version, QWaylandSurface *surface);
+    ~ExtendedSurface();
+
+    void sendGenericProperty(const QString &name, const QVariant &variant);
+
+    void sendOnScreenVisibilityChange(bool onScreen);
+    void setVisibility(QWindow::Visibility visibility);
+
+    void setParentSurface(QWaylandSurface *s);
+
+    Qt::ScreenOrientations contentOrientationMask() const;
+
+    WindowFlags windowFlags() const { return m_windowFlags; }
+
+    QVariantMap windowProperties() const;
+    QVariant windowProperty(const QString &propertyName) const;
+    void setWindowProperty(const QString &name, const QVariant &value);
+
+Q_SIGNALS:
+    void contentOrientationMaskChanged();
+    void windowFlagsChanged();
+    void windowPropertyChanged(const QString &name, const QVariant &value);
+    void raiseRequested();
+    void lowerRequested();
+
+private:
+    void setWindowPropertyImpl(const QString &name, const QVariant &value);
+
+    QWaylandSurface *m_surface;
+
+    Qt::ScreenOrientations m_contentOrientationMask;
+
+    WindowFlags m_windowFlags;
+
+    QByteArray m_authenticationToken;
+    QVariantMap m_windowProperties;
+
+    void extended_surface_update_generic_property(Resource *resource,
+                                                  const QString &name,
+                                                  struct wl_array *value) override;
+
+    void extended_surface_set_content_orientation_mask(Resource *resource,
+                                                       int32_t orientation) override;
+
+    void extended_surface_set_window_flags(Resource *resource,
+                                           int32_t flags) override;
+
+    void extended_surface_destroy_resource(Resource *) override;
+    void extended_surface_raise(Resource *) override;
+    void extended_surface_lower(Resource *) override;
+};
+
+}
+
+QT_END_NAMESPACE
+
+#endif // WLEXTENDEDSURFACE_H
diff --git a/sync.profile b/sync.profile
index 95ddb557..0e0d7f6e 100644
--- a/sync.profile
+++ b/sync.profile
@@ -53,6 +53,7 @@
         "^wayland-xdg-shell-unstable-v6-client-protocol.h",
     ],
     "$basedir/src/compositor" => [
+        "^qwayland-server-surface-extension.h",
         "^qwayland-server-wayland.h",
         "^qwayland-server-hardware-integration.h",
         "^qwayland-server-idle-inhibit-unstable-v1.h",
@@ -69,6 +70,7 @@
         "^qwayland-server-xdg-output-unstable-v1.h",
         "^qwayland-server-xdg-shell-unstable-v6.h",
         "^qwayland-server-xdg-shell.h",
+        "^wayland-surface-extension-server-protocol.h",
         "^wayland-hardware-integration-server-protocol.h",
         "^wayland-idle-inhibit-unstable-v1-server-protocol.h",
         "^wayland-ivi-application-server-protocol.h",
